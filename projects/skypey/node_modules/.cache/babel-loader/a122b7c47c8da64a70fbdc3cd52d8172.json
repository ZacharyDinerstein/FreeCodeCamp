{"ast":null,"code":"import _defineProperty from \"/Users/user/Desktop/Everything/Work/Coding/Projects & Companies/FreeCodeCamp/projects/skypey/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nconst shortid = require(\"shortid\"); // shortid.generate() returns a unique \"short\" id\n\n\nconst txtgen = require(\"txtgen\"); // txtgen.sentence() returns random \"readable\" sentences\n\n\nconst faker = require(\"faker\"); // faker is used for generating random fake data.\n\n\nconst _ = require(\"lodash\"); // lodash is a utility lib for Javascript\n\n\nconst users = generateUsers(10);\nexport const contacts = _.mapKeys(users, \"user_id\");\nexport const getMessages = messagesPerUser => {\n  let messages = {};\n\n  _.forEach(users, user => {\n    messages[user.user_id] = _objectSpread({}, _.mapKeys(generateMsgs(messagesPerUser), \"number\"));\n  });\n\n  return messages;\n}; // just an example of how the state object is structured\n\nexport const state = {\n  user: generateUser(),\n  messages: getMessages(10),\n  typing: \"\",\n  contacts,\n  activeUserId: null\n};\n/**\n * @returns {Object} - a new user object\n */\n\nexport function generateUser() {\n  return {\n    name: faker.name.findName(),\n    email: faker.internet.email(),\n    profile_pic: faker.internet.avatar(),\n    status: txtgen.sentence(),\n    user_id: shortid.generate()\n  };\n}\n/**\n * @returns {Object} - a new message object\n */\n\nfunction generateMsg(number) {\n  return {\n    number,\n    text: txtgen.sentence(),\n    is_user_msg: faker.random.boolean()\n  };\n}\n/**\n *\n * @param {Number} numberOfUsers - the number of users to be generated\n * @param {Function} generateUser - function that generates a single user\n * @returns {Array} - an array of user objects with length n = numberOfUsers\n */\n\n\nfunction generateUsers(numberOfUsers) {\n  return Array.from({\n    length: numberOfUsers\n  }, () => generateUser());\n}\n\nfunction generateMsgs(numberOfMsgs) {\n  return Array.from({\n    length: numberOfMsgs\n  }, (v, i) => generateMsg(i));\n}","map":{"version":3,"sources":["/Users/user/Desktop/Everything/Work/Coding/Projects & Companies/FreeCodeCamp/projects/skypey/src/static-data.js"],"names":["shortid","require","txtgen","faker","_","users","generateUsers","contacts","mapKeys","getMessages","messagesPerUser","messages","forEach","user","user_id","generateMsgs","state","generateUser","typing","activeUserId","name","findName","email","internet","profile_pic","avatar","status","sentence","generate","generateMsg","number","text","is_user_msg","random","boolean","numberOfUsers","Array","from","length","numberOfMsgs","v","i"],"mappings":";;;;;;AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB,C,CAAoC;;;AACpC,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAAtB,C,CAAkC;;;AAClC,MAAME,KAAK,GAAGF,OAAO,CAAC,OAAD,CAArB,C,CAAgC;;;AAChC,MAAMG,CAAC,GAAGH,OAAO,CAAC,QAAD,CAAjB,C,CAA6B;;;AAE7B,MAAMI,KAAK,GAAGC,aAAa,CAAC,EAAD,CAA3B;AACA,OAAO,MAAMC,QAAQ,GAAGH,CAAC,CAACI,OAAF,CAAUH,KAAV,EAAiB,SAAjB,CAAjB;AACP,OAAO,MAAMI,WAAW,GAAGC,eAAe,IAAI;AAC5C,MAAIC,QAAQ,GAAG,EAAf;;AACAP,EAAAA,CAAC,CAACQ,OAAF,CAAUP,KAAV,EAAiBQ,IAAI,IAAI;AACvBF,IAAAA,QAAQ,CAACE,IAAI,CAACC,OAAN,CAAR,qBACKV,CAAC,CAACI,OAAF,CAAUO,YAAY,CAACL,eAAD,CAAtB,EAAyC,QAAzC,CADL;AAGD,GAJD;;AAKA,SAAOC,QAAP;AACD,CARM,C,CAUP;;AACA,OAAO,MAAMK,KAAK,GAAG;AACnBH,EAAAA,IAAI,EAAEI,YAAY,EADC;AAEnBN,EAAAA,QAAQ,EAAEF,WAAW,CAAC,EAAD,CAFF;AAGnBS,EAAAA,MAAM,EAAE,EAHW;AAInBX,EAAAA,QAJmB;AAKnBY,EAAAA,YAAY,EAAE;AALK,CAAd;AAQP;;;;AAGA,OAAO,SAASF,YAAT,GAAwB;AAC7B,SAAO;AACLG,IAAAA,IAAI,EAAEjB,KAAK,CAACiB,IAAN,CAAWC,QAAX,EADD;AAELC,IAAAA,KAAK,EAAEnB,KAAK,CAACoB,QAAN,CAAeD,KAAf,EAFF;AAGLE,IAAAA,WAAW,EAAErB,KAAK,CAACoB,QAAN,CAAeE,MAAf,EAHR;AAILC,IAAAA,MAAM,EAAExB,MAAM,CAACyB,QAAP,EAJH;AAKLb,IAAAA,OAAO,EAAEd,OAAO,CAAC4B,QAAR;AALJ,GAAP;AAOD;AACD;;;;AAGA,SAASC,WAAT,CAAqBC,MAArB,EAA6B;AAC3B,SAAO;AACLA,IAAAA,MADK;AAELC,IAAAA,IAAI,EAAE7B,MAAM,CAACyB,QAAP,EAFD;AAGLK,IAAAA,WAAW,EAAE7B,KAAK,CAAC8B,MAAN,CAAaC,OAAb;AAHR,GAAP;AAKD;AACD;;;;;;;;AAMA,SAAS5B,aAAT,CAAuB6B,aAAvB,EAAsC;AACpC,SAAOC,KAAK,CAACC,IAAN,CAAW;AAAEC,IAAAA,MAAM,EAAEH;AAAV,GAAX,EAAsC,MAAMlB,YAAY,EAAxD,CAAP;AACD;;AAED,SAASF,YAAT,CAAsBwB,YAAtB,EAAoC;AAClC,SAAOH,KAAK,CAACC,IAAN,CAAW;AAAEC,IAAAA,MAAM,EAAEC;AAAV,GAAX,EAAqC,CAACC,CAAD,EAAIC,CAAJ,KAAUZ,WAAW,CAACY,CAAD,CAA1D,CAAP;AACD","sourcesContent":["const shortid = require(\"shortid\"); // shortid.generate() returns a unique \"short\" id\nconst txtgen = require(\"txtgen\"); // txtgen.sentence() returns random \"readable\" sentences\nconst faker = require(\"faker\"); // faker is used for generating random fake data.\nconst _ = require(\"lodash\"); // lodash is a utility lib for Javascript\n\nconst users = generateUsers(10);\nexport const contacts = _.mapKeys(users, \"user_id\");\nexport const getMessages = messagesPerUser => {\n  let messages = {};\n  _.forEach(users, user => {\n    messages[user.user_id] = {\n      ..._.mapKeys(generateMsgs(messagesPerUser), \"number\")\n    };\n  });\n  return messages;\n};\n\n// just an example of how the state object is structured\nexport const state = {\n  user: generateUser(),\n  messages: getMessages(10),\n  typing: \"\",\n  contacts,\n  activeUserId: null\n};\n\n/**\n * @returns {Object} - a new user object\n */\nexport function generateUser() {\n  return {\n    name: faker.name.findName(),\n    email: faker.internet.email(),\n    profile_pic: faker.internet.avatar(),\n    status: txtgen.sentence(),\n    user_id: shortid.generate()\n  };\n}\n/**\n * @returns {Object} - a new message object\n */\nfunction generateMsg(number) {\n  return {\n    number,\n    text: txtgen.sentence(),\n    is_user_msg: faker.random.boolean()\n  };\n}\n/**\n *\n * @param {Number} numberOfUsers - the number of users to be generated\n * @param {Function} generateUser - function that generates a single user\n * @returns {Array} - an array of user objects with length n = numberOfUsers\n */\nfunction generateUsers(numberOfUsers) {\n  return Array.from({ length: numberOfUsers }, () => generateUser());\n}\n\nfunction generateMsgs(numberOfMsgs) {\n  return Array.from({ length: numberOfMsgs }, (v, i) => generateMsg(i));\n}"]},"metadata":{},"sourceType":"module"}