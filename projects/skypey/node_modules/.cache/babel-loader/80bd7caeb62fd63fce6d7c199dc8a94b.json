{"ast":null,"code":"import _defineProperty from\"/Users/user/Desktop/Everything/Work/Coding/Projects & Companies/FreeCodeCamp/projects/skypey/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(source,true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(source).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}var shortid=require(\"shortid\");// shortid.generate() returns a unique \"short\" id\nvar txtgen=require(\"txtgen\");// txtgen.sentence() returns random \"readable\" sentences\nvar faker=require(\"faker\");// faker is used for generating random fake data.\nvar _=require(\"lodash\");// lodash is a utility lib for Javascript\nvar users=generateUsers(10);export var contacts=_.mapKeys(users,\"user_id\");export var getMessages=function getMessages(messagesPerUser){var messages={};_.forEach(users,function(user){messages[user.user_id]=_objectSpread({},_.mapKeys(generateMsgs(messagesPerUser),\"number\"));});return messages;};// just an example of how the state object is structured\nexport var state={user:generateUser(),messages:getMessages(10),typing:\"\",contacts:contacts,activeUserId:null};/**\n * @returns {Object} - a new user object\n */export function generateUser(){return{name:faker.name.findName(),email:faker.internet.email(),profile_pic:faker.internet.avatar(),status:txtgen.sentence(),user_id:shortid.generate()};}/**\n * @returns {Object} - a new message object\n */function generateMsg(number){return{number:number,text:txtgen.sentence(),is_user_msg:faker.random.boolean()};}/**\n *\n * @param {Number} numberOfUsers - the number of users to be generated\n * @param {Function} generateUser - function that generates a single user\n * @returns {Array} - an array of user objects with length n = numberOfUsers\n */function generateUsers(numberOfUsers){return Array.from({length:numberOfUsers},function(){return generateUser();});}function generateMsgs(numberOfMsgs){return Array.from({length:numberOfMsgs},function(v,i){return generateMsg(i);});}","map":{"version":3,"sources":["/Users/user/Desktop/Everything/Work/Coding/Projects & Companies/FreeCodeCamp/projects/skypey/src/static-data.js"],"names":["shortid","require","txtgen","faker","_","users","generateUsers","contacts","mapKeys","getMessages","messagesPerUser","messages","forEach","user","user_id","generateMsgs","state","generateUser","typing","activeUserId","name","findName","email","internet","profile_pic","avatar","status","sentence","generate","generateMsg","number","text","is_user_msg","random","boolean","numberOfUsers","Array","from","length","numberOfMsgs","v","i"],"mappings":"i+BAAA,GAAMA,CAAAA,OAAO,CAAGC,OAAO,CAAC,SAAD,CAAvB,CAAoC;AACpC,GAAMC,CAAAA,MAAM,CAAGD,OAAO,CAAC,QAAD,CAAtB,CAAkC;AAClC,GAAME,CAAAA,KAAK,CAAGF,OAAO,CAAC,OAAD,CAArB,CAAgC;AAChC,GAAMG,CAAAA,CAAC,CAAGH,OAAO,CAAC,QAAD,CAAjB,CAA6B;AAE7B,GAAMI,CAAAA,KAAK,CAAGC,aAAa,CAAC,EAAD,CAA3B,CACA,MAAO,IAAMC,CAAAA,QAAQ,CAAGH,CAAC,CAACI,OAAF,CAAUH,KAAV,CAAiB,SAAjB,CAAjB,CACP,MAAO,IAAMI,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAAAC,eAAe,CAAI,CAC5C,GAAIC,CAAAA,QAAQ,CAAG,EAAf,CACAP,CAAC,CAACQ,OAAF,CAAUP,KAAV,CAAiB,SAAAQ,IAAI,CAAI,CACvBF,QAAQ,CAACE,IAAI,CAACC,OAAN,CAAR,kBACKV,CAAC,CAACI,OAAF,CAAUO,YAAY,CAACL,eAAD,CAAtB,CAAyC,QAAzC,CADL,EAGD,CAJD,EAKA,MAAOC,CAAAA,QAAP,CACD,CARM,CAUP;AACA,MAAO,IAAMK,CAAAA,KAAK,CAAG,CACnBH,IAAI,CAAEI,YAAY,EADC,CAEnBN,QAAQ,CAAEF,WAAW,CAAC,EAAD,CAFF,CAGnBS,MAAM,CAAE,EAHW,CAInBX,QAAQ,CAARA,QAJmB,CAKnBY,YAAY,CAAE,IALK,CAAd,CAQP;;GAGA,MAAO,SAASF,CAAAA,YAAT,EAAwB,CAC7B,MAAO,CACLG,IAAI,CAAEjB,KAAK,CAACiB,IAAN,CAAWC,QAAX,EADD,CAELC,KAAK,CAAEnB,KAAK,CAACoB,QAAN,CAAeD,KAAf,EAFF,CAGLE,WAAW,CAAErB,KAAK,CAACoB,QAAN,CAAeE,MAAf,EAHR,CAILC,MAAM,CAAExB,MAAM,CAACyB,QAAP,EAJH,CAKLb,OAAO,CAAEd,OAAO,CAAC4B,QAAR,EALJ,CAAP,CAOD,CACD;;GAGA,QAASC,CAAAA,WAAT,CAAqBC,MAArB,CAA6B,CAC3B,MAAO,CACLA,MAAM,CAANA,MADK,CAELC,IAAI,CAAE7B,MAAM,CAACyB,QAAP,EAFD,CAGLK,WAAW,CAAE7B,KAAK,CAAC8B,MAAN,CAAaC,OAAb,EAHR,CAAP,CAKD,CACD;;;;;GAMA,QAAS5B,CAAAA,aAAT,CAAuB6B,aAAvB,CAAsC,CACpC,MAAOC,CAAAA,KAAK,CAACC,IAAN,CAAW,CAAEC,MAAM,CAAEH,aAAV,CAAX,CAAsC,iBAAMlB,CAAAA,YAAY,EAAlB,EAAtC,CAAP,CACD,CAED,QAASF,CAAAA,YAAT,CAAsBwB,YAAtB,CAAoC,CAClC,MAAOH,CAAAA,KAAK,CAACC,IAAN,CAAW,CAAEC,MAAM,CAAEC,YAAV,CAAX,CAAqC,SAACC,CAAD,CAAIC,CAAJ,QAAUZ,CAAAA,WAAW,CAACY,CAAD,CAArB,EAArC,CAAP,CACD","sourcesContent":["const shortid = require(\"shortid\"); // shortid.generate() returns a unique \"short\" id\nconst txtgen = require(\"txtgen\"); // txtgen.sentence() returns random \"readable\" sentences\nconst faker = require(\"faker\"); // faker is used for generating random fake data.\nconst _ = require(\"lodash\"); // lodash is a utility lib for Javascript\n\nconst users = generateUsers(10);\nexport const contacts = _.mapKeys(users, \"user_id\");\nexport const getMessages = messagesPerUser => {\n  let messages = {};\n  _.forEach(users, user => {\n    messages[user.user_id] = {\n      ..._.mapKeys(generateMsgs(messagesPerUser), \"number\")\n    };\n  });\n  return messages;\n};\n\n// just an example of how the state object is structured\nexport const state = {\n  user: generateUser(),\n  messages: getMessages(10),\n  typing: \"\",\n  contacts,\n  activeUserId: null\n};\n\n/**\n * @returns {Object} - a new user object\n */\nexport function generateUser() {\n  return {\n    name: faker.name.findName(),\n    email: faker.internet.email(),\n    profile_pic: faker.internet.avatar(),\n    status: txtgen.sentence(),\n    user_id: shortid.generate()\n  };\n}\n/**\n * @returns {Object} - a new message object\n */\nfunction generateMsg(number) {\n  return {\n    number,\n    text: txtgen.sentence(),\n    is_user_msg: faker.random.boolean()\n  };\n}\n/**\n *\n * @param {Number} numberOfUsers - the number of users to be generated\n * @param {Function} generateUser - function that generates a single user\n * @returns {Array} - an array of user objects with length n = numberOfUsers\n */\nfunction generateUsers(numberOfUsers) {\n  return Array.from({ length: numberOfUsers }, () => generateUser());\n}\n\nfunction generateMsgs(numberOfMsgs) {\n  return Array.from({ length: numberOfMsgs }, (v, i) => generateMsg(i));\n}"]},"metadata":{},"sourceType":"module"}